// Arquivo principal de inicializa√ß√£o do jogo
// Este arquivo √© carregado por √∫ltimo e inicializa tudo

// Aguardar o carregamento completo da p√°gina
window.addEventListener('load', () => {
    console.log('üéÆ Inicializando Grand Chase Web...');
    
    // Verificar se todos os scripts foram carregados
    const requiredClasses = ['Game', 'Player', 'Enemy', 'Particle', 'Projectile', 'SpriteManager', 'CombatSystem', 'UIManager', 'ShopSystem', 'InventorySystem'];
    const missingClasses = requiredClasses.filter(className => typeof window[className] === 'undefined');
    
    if (missingClasses.length > 0) {
        console.error('‚ùå Classes n√£o encontradas:', missingClasses);
        console.log('üîç Verificando classes dispon√≠veis:');
        console.log('Game:', typeof window.Game);
        console.log('Player:', typeof window.Player);
        console.log('Enemy:', typeof window.Enemy);
        console.log('Particle:', typeof window.Particle);
        console.log('Projectile:', typeof window.Projectile);
        console.log('SpriteManager:', typeof window.SpriteManager);
        console.log('CombatSystem:', typeof window.CombatSystem);
        console.log('UIManager:', typeof window.UIManager);
        
        // Tentar inicializar mesmo assim
        console.log('üîß Tentando inicializar mesmo assim...');
    }
    
    // Inicializar o jogo
    try {
        window.game = new Game();
        console.log('‚úÖ Jogo inicializado com sucesso!');
        
        // Instru√ß√µes iniciais removidas para evitar spam de notifica√ß√µes
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar o jogo:', error);
        alert('Erro ao inicializar o jogo: ' + error.message);
    }
});

// Fun√ß√£o para debug (dispon√≠vel no console)
window.debugGame = function() {
    if (window.game) {
        console.log('üéÆ Estado do Jogo:');
        console.log('- Estado:', game.gameState);
        console.log('- Jogador:', game.player);
        console.log('- Inimigos:', game.enemies.length);
        console.log('- Part√≠culas:', game.particles.length);
        console.log('- Proj√©teis:', game.projectiles.length);
    } else {
        console.log('‚ùå Jogo n√£o inicializado');
    }
};

// Fun√ß√£o para spawnar inimigos (debug)
window.spawnEnemy = function(type = 'goblin') {
    if (window.game && game.gameState === 'playing') {
        const x = game.player.x + 200 + Math.random() * 100;
        const y = game.height - 100;
        game.enemies.push(new Enemy(x, y, type));
        console.log(`‚úÖ Inimigo ${type} spawnado em (${x}, ${y})`);
    } else {
        console.log('‚ùå Jogo n√£o est√° em execu√ß√£o');
    }
};

// Fun√ß√£o para dar experi√™ncia (debug)
window.giveExp = function(amount = 50) {
    if (window.game && game.player) {
        game.player.gainExp(amount);
        console.log(`‚úÖ ${amount} EXP dado ao jogador`);
    } else {
        console.log('‚ùå Jogador n√£o encontrado');
    }
};

// Fun√ß√£o para curar jogador (debug)
window.healPlayer = function(amount = 50) {
    if (window.game && game.player) {
        game.player.health = Math.min(game.player.maxHealth, game.player.health + amount);
        console.log(`‚úÖ Jogador curado em ${amount} HP`);
    } else {
        console.log('‚ùå Jogador n√£o encontrado');
    }
};

// Fun√ß√£o para pausar/despausar (debug)
window.togglePause = function() {
    if (window.game) {
        if (game.gameState === 'playing') {
            game.gameState = 'paused';
            console.log('‚è∏Ô∏è Jogo pausado');
        } else if (game.gameState === 'paused') {
            game.gameState = 'playing';
            console.log('‚ñ∂Ô∏è Jogo retomado');
        }
    } else {
        console.log('‚ùå Jogo n√£o inicializado');
    }
};

// Log de inicializa√ß√£o
console.log('üìÅ Grand Chase Web - Sistema carregado');
console.log('üîß Comandos de debug dispon√≠veis:');
console.log('  - debugGame() - Mostrar estado do jogo');
console.log('  - spawnEnemy(type) - Spawnar inimigo');
console.log('  - giveExp(amount) - Dar experi√™ncia');
console.log('  - healPlayer(amount) - Curar jogador');
console.log('  - togglePause() - Pausar/despausar');
